module sudoku_display_top(
    input  wire        CLOCK_50,      // 50 MHz clock from DE1-SoC
    input  wire        reset_n,       // Active-low reset
    output wire [15:0] LT24_DATA,     // Data bus to LT24
    output wire        LT24_WR_n,     // Write strobe (active low)
    output wire        LT24_RD_n,     // Read strobe (active low)
    output wire        LT24_CS_n,     // Chip select (active low)
    output wire        LT24_RS,       // Register select
    output wire        LT24_RESET_n,  // LCD reset (active low)
    output wire        LT24_BL        // Backlight
);

    // Parameters for grid and cell sizes
    localparam GRID_ORIGIN_X = 10;
    localparam GRID_ORIGIN_Y = 10;
    localparam CELL_SIZE     = 22; // Each cell is 22x22 pixels

    // Example Sudoku board (0 = empty, others = numbers)
    reg [3:0] sudoku_board [0:8][0:8];
    initial begin
        sudoku_board[0][0] = 5; sudoku_board[0][1] = 3; sudoku_board[0][2] = 0; sudoku_board[0][3] = 0; sudoku_board[0][4] = 7; sudoku_board[0][5] = 0; sudoku_board[0][6] = 0; sudoku_board[0][7] = 0; sudoku_board[0][8] = 0;
        sudoku_board[1][0] = 6; sudoku_board[1][1] = 0; sudoku_board[1][2] = 0; sudoku_board[1][3] = 1; sudoku_board[1][4] = 9; sudoku_board[1][5] = 5; sudoku_board[1][6] = 0; sudoku_board[1][7] = 0; sudoku_board[1][8] = 0;
        sudoku_board[2][0] = 0; sudoku_board[2][1] = 9; sudoku_board[2][2] = 8; sudoku_board[2][3] = 0; sudoku_board[2][4] = 0; sudoku_board[2][5] = 0; sudoku_board[2][6] = 0; sudoku_board[2][7] = 6; sudoku_board[2][8] = 0;
        sudoku_board[3][0] = 8; sudoku_board[3][1] = 0; sudoku_board[3][2] = 0; sudoku_board[3][3] = 0; sudoku_board[3][4] = 6; sudoku_board[3][5] = 0; sudoku_board[3][6] = 0; sudoku_board[3][7] = 0; sudoku_board[3][8] = 3;
        sudoku_board[4][0] = 4; sudoku_board[4][1] = 0; sudoku_board[4][2] = 0; sudoku_board[4][3] = 8; sudoku_board[4][4] = 0; sudoku_board[4][5] = 3; sudoku_board[4][6] = 0; sudoku_board[4][7] = 0; sudoku_board[4][8] = 1;
        sudoku_board[5][0] = 7; sudoku_board[5][1] = 0; sudoku_board[5][2] = 0; sudoku_board[5][3] = 0; sudoku_board[5][4] = 2; sudoku_board[5][5] = 0; sudoku_board[5][6] = 0; sudoku_board[5][7] = 0; sudoku_board[5][8] = 6;
        sudoku_board[6][0] = 0; sudoku_board[6][1] = 6; sudoku_board[6][2] = 0; sudoku_board[6][3] = 0; sudoku_board[6][4] = 0; sudoku_board[6][5] = 0; sudoku_board[6][6] = 2; sudoku_board[6][7] = 8; sudoku_board[6][8] = 0;
        sudoku_board[7][0] = 0; sudoku_board[7][1] = 0; sudoku_board[7][2] = 0; sudoku_board[7][3] = 4; sudoku_board[7][4] = 1; sudoku_board[7][5] = 9; sudoku_board[7][6] = 0; sudoku_board[7][7] = 0; sudoku_board[7][8] = 5;
        sudoku_board[8][0] = 0; sudoku_board[8][1] = 0; sudoku_board[8][2] = 0; sudoku_board[8][3] = 0; sudoku_board[8][4] = 8; sudoku_board[8][5] = 0; sudoku_board[8][6] = 0; sudoku_board[8][7] = 7; sudoku_board[8][8] = 9;
    end

    // State machine to initialize and draw grid
    reg [3:0] state;
    reg [7:0] x, y;
    reg [3:0] i, j;

    // Assume LT24 driver module interface:
    // Replace with your LT24 driver module calls
    task LT24_draw_rect(input [7:0] x1, y1, x2, y2, input [15:0] color);
        // Code to draw a rectangle from (x1, y1) to (x2, y2) with color
    endtask

    task LT24_draw_char(input [7:0] x, y, input [7:0] char, input [15:0] color, bgcolor);
        // Code to draw a character at (x, y) with given color and background color
    endtask

    task LT24_clear_screen(input [15:0] color);
        // Code to clear screen with a specific color
    endtask

    always @(posedge CLOCK_50 or negedge reset_n) begin
        if (!reset_n) begin
            state <= 0;
            x <= 0;
            y <= 0;
            i <= 0;
            j <= 0;
        end else begin
            case (state)
                0: begin
                    // Clear screen (white)
                    LT24_clear_screen(16'hFFFF);  // White color
                    state <= 1;
                end
                1: begin
                    // Draw grid lines (black)
                    for (i = 0; i <= 9; i = i + 1) begin
                        // Vertical lines
                        LT24_draw_rect(
                            GRID_ORIGIN_X + i*CELL_SIZE, 
                            GRID_ORIGIN_Y, 
                            GRID_ORIGIN_X + i*CELL_SIZE + ((i%3==0) ? 1 : 0), 
                            GRID_ORIGIN_Y + 9*CELL_SIZE, 
                            16'h0000  // Black color
                        );
                        // Horizontal lines
                        LT24_draw_rect(
                            GRID_ORIGIN_X, 
                            GRID_ORIGIN_Y + i*CELL_SIZE, 
                            GRID_ORIGIN_X + 9*CELL_SIZE, 
                            GRID_ORIGIN_Y + i*CELL_SIZE + ((i%3==0) ? 1 : 0), 
                            16'h0000  // Black color
                        );
                    end
                    i <= 0;
                    j <= 0;
                    state <= 2;
                end
                2: begin
                    // Draw numbers
                    if (i < 9) begin
                        if (j < 9) begin
                            if (sudoku_board[i][j] != 0) begin
                                LT24_draw_char(
                                    GRID_ORIGIN_X + j*CELL_SIZE + 7,
                                    GRID_ORIGIN_Y + i*CELL_SIZE + 5,
                                    sudoku_board[i][j] + 8'd48, // ASCII '0' + value
                                    16'h001F, // Blue text
                                    16'hFFFF  // White background
                                );
                            end
                            j <= j + 1;
                        end else begin
                            j <= 0;
                            i <= i + 1;
                        end
                    end else begin
                        state <= 3;
                    end
                end
                3: begin
                    // Done
                    state <= 3;
                end
            endcase
        end
    end

    // Assign LT24 outputs (connect to your LT24 driver)
    assign LT24_DATA    = 16'bz;  // Connect to your LT24 driver module
    assign LT24_WR_n    = 1'b1;   // Write strobe
    assign LT24_RD_n    = 1'b1;   // Read strobe
    assign LT24_CS_n    = 1'b1;   // Chip select
    assign LT24_RS      = 1'b0;   // Register select
    assign LT24_RESET_n = reset_n;  // Reset signal
    assign LT24_BL      = 1'b1;   // Backlight enabled

endmodule
